https://nestedsoftware.com/2019/09/09/pytorch-image-recognition-with-convolutional-networks-4k17.159805.html
PyTorch Image Recognition with Convolutional Networks
====================================================================================================================

class ConvNetSimple(nn.Module):
    def __init__(self):
        super().__init__()
        self.conv1 = nn.Conv2d(in_channels=1, out_channels=20, kernel_size=5)
        self.fc1 = nn.Linear(12*12*20, 100)
        self.out = nn.Linear(100, OUTPUT_SIZE)

    def forward(self, x):
        x = self.conv1(x)														input 28x28 output 24x24x20 [(n+2p-f)/s+1]=(28+2x0-5)/1+1
        x = torch.sigmoid(x)
        x = torch.max_pool2d(x, kernel_size=2, stride=2)						input 24x24 output 12x12x20 [(n+2p-f)/s+1]=(24+2x0-2)/2+1

        x = x.view(-1, 12*12*20)												input 12x12x20 output 12x12x20 
        x = self.fc1(x)
        x = torch.sigmoid(x)

        x = self.out(x)
        return x
		

class ConvNetTwoConvLayers(nn.Module):
    def __init__(self):
        super().__init__()
        self.conv1 = nn.Conv2d(in_channels=1, out_channels=20, kernel_size=5)			
        self.conv2 = nn.Conv2d(in_channels=20, out_channels=40, kernel_size=5)
        self.fc1 = nn.Linear(4*4*40, 100)
        self.out = nn.Linear(100, OUTPUT_SIZE)

    def forward(self, x):
        x = self.conv1(x)													input 28x28 output 24x24x20 [(n+2p-f)/s+1]=(28+2x0-5)/1+1
        x = torch.sigmoid(x)
        x = torch.max_pool2d(x, kernel_size=2, stride=2)					input 24x24 output 12x12x20 [(n+2p-f)/s+1]=(24+2x0-2)/2+1

        x = self.conv2(x)													input 12x12 output 8x8x40 [(n+2p-f)/s+1]=(12+2x0-5)/1+1
        x = torch.sigmoid(x)
        x = torch.max_pool2d(x, kernel_size=2, stride=2)					input 8x8x40 output 4x4x40 [(n+2p-f)/s+1]=(8+2x0-2)/2+1

        x = x.view(-1, 4*4*40)												input 4x4x40 output 4x4x40 
        x = self.fc1(x)
        x = torch.sigmoid(x)

        x = self.out(x)
        return x